services:
  # microservices ==================================
  client-gateway:
    build:
      context: ./client-gateway
      dockerfile: Dockerfile
    container_name: client-gateway_container
    restart: unless-stopped
    ports:
      - '${PORT}:3000'
    volumes:
      - ./client-gateway/src:/usr/src/app/src
    command: npm run start:dev
    env_file:
      - ./client-gateway/.env
    depends_on:
      - products_ms
      - orders_ms
      - payments_ms

  products_ms:
    build:
      context: ./products-microservice
      dockerfile: Dockerfile
    container_name: products_ms_container
    restart: unless-stopped
    volumes:
      - ./products-microservice/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3001
      - NATS_SERVERS=nats://nats:4222
      - DATABASE_URL=postgres://${DB_USERNAME}:${DB_PASSWORD}@products_db:5432/${DB_NAME}
    depends_on:
      - products_db
      - redis
      - mongodb

  orders_ms:
    build:
      context: ./orders-microservice
      dockerfile: Dockerfile
    container_name: orders_ms_container
    restart: unless-stopped
    volumes:
      - ./orders-microservice/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3002
      - NATS_SERVERS=nats://nats:4222
      - DATABASE_URL=postgres://${DB_USERNAME}:${DB_PASSWORD}@orders_db:5432/${DB_NAME}
    depends_on:
      - products_db
      - redis
      - mongodb

  payments_ms:
    build:
      context: ./payments-ms
      dockerfile: Dockerfile
    container_name: payments_ms_container
    restart: unless-stopped
    volumes:
      - ./payments-ms/src:/usr/src/app/src
    ports:
      - ${PAYMENT_MS_PORT}:${PAYMENT_MS_PORT}
    command: npm run start:dev
    environment:
      - PORT=${PAYMENT_MS_PORT}
      - NATS_SERVERS=nats://nats:4222
      - DATABASE_URL=postgres://${DB_USERNAME}:${DB_PASSWORD}@payments_db:5432/${DB_NAME}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY_PAYMENT_MS}
      - STRIPE_ENDPOINT_SECRET=${STRIPE_ENDPOINT_SECRET_PAYMENT_MS}
      - STRIPE_SUCCESS_URL=${STRIPE_SUCCESS_URL_PAYMENT_MS}
      - STRIPE_CANCEL_URL=${STRIPE_CANCEL_URL_PAYMENT_MS}
    depends_on:
      - payments_db
      - redis
      - mongodb

  # infra ==================================
  products_db:
    image: postgres:15.4
    container_name: postgres_container
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - products_db:/var/lib/postgresql/data
    ports:
      - '${DB_PORT}:5432'

  orders_db:
    image: postgres:15.4
    container_name: orders_db_container
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - orders_db:/var/lib/postgresql/data
    ports:
      - '${DB_PORT_ORDER}:5432'

  payments_db:
    image: postgres:15.4
    container_name: payments_db_container
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - payments_db:/var/lib/postgresql/data
    ports:
      - '${DB_PORT_PAYMENT}:5432'

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_container
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - '5050:80'

  redis:
    image: redis:7.0.13
    container_name: redis_container
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'

  mongodb:
    image: mongo:6.0.10
    container_name: mongodb_container
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb_data:/data/db
    ports:
      - '27017:27017'

  # ### NATS ==================================
  nats:
    image: nats:2.10.18
    container_name: nats_container
    restart: unless-stopped
    ports:
      # - '4222:4222'
      # - '6222:6222'
      - '8222:8222' # HTTP monitoring port

volumes:
  products_db:
  orders_db:
  payments_db:
  pgadmin_data:
  redis_data:
  mongodb_data:
